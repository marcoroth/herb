#include <ruby.h>

#include "error_helpers.h"
#include "extension_helpers.h"
#include "extension.h"
#include "nodes.h"

#include "../../src/include/herb.h"
#include "../../src/include/token.h"

VALUE rb_node_from_c_struct(AST_NODE_T* node);
static VALUE rb_nodes_array_from_c_array(array_T* array);

<%- nodes.each do |node| -%>
static VALUE rb_<%= node.human %>_from_c_struct(<%= node.struct_type %>* <%= node.human %>) {
  if (<%= node.human %> == NULL) { return Qnil; }

  AST_NODE_T* node = &<%= node.human %>->base;

  VALUE Herb = rb_define_module("Herb");
  VALUE AST = rb_define_module_under(Herb, "AST");
  VALUE Node = rb_define_class_under(AST, "Node", rb_cObject);
  VALUE <%= node.name %> = rb_define_class_under(AST, "<%= node.name %>", Node);

  VALUE type = rb_str_new_cstr(ast_node_type_to_string(node));
  VALUE location = rb_location_from_c_struct(node->location);
  VALUE errors = rb_errors_array_from_c_array(node->errors);

  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  VALUE <%= node.human %>_<%= field.name %> = rb_str_new_cstr(<%= node.human %>-><%= field.name %>);
  <%- when Herb::Template::NodeField -%>
  VALUE <%= node.human %>_<%= field.name %> = rb_node_from_c_struct((AST_NODE_T*) <%= node.human %>-><%= field.name %>);
  <%- when Herb::Template::TokenField -%>
  VALUE <%= node.human %>_<%= field.name %> = rb_token_from_c_struct(<%= node.human %>-><%= field.name %>);
  <%- when Herb::Template::BooleanField -%>
  VALUE <%= node.human %>_<%= field.name %> = (<%= node.human %>-><%= field.name %>) ? Qtrue : Qfalse;
  <%- when Herb::Template::ArrayField -%>
  VALUE <%= node.human %>_<%= field.name %> = rb_nodes_array_from_c_array(<%= node.human %>-><%= field.name %>);
  <%- else -%>
  /* <%= field.inspect %> */
  VALUE <%= node.human %>_<%= field.name %> = Qnil;
  <%- end -%>
  <%- end -%>

  VALUE args[<%= 3 + node.fields.count %>] = {
    type,
    location,
    errors<% if node.fields.any? %>,<% end %>
    <%- node.fields.each do |field| -%>
    <%= node.human %>_<%= field.name %><% if node.fields.last != field %>,<% end %>
    <%- end -%>
  };

  return rb_class_new_instance(<%= 3 + node.fields.count %>, args, <%= node.name %>);
};

<%- end -%>

VALUE rb_node_from_c_struct(AST_NODE_T* node) {
  if (!node) { return Qnil; }

  switch (node->type) {
  <%- nodes.each do |node| -%>
    case <%= node.type %>: return rb_<%= node.human %>_from_c_struct((<%= node.struct_type %>*) node); break;
  <%- end -%>
  }

  return Qnil;
}

static VALUE rb_nodes_array_from_c_array(array_T* array) {
  VALUE rb_array = rb_ary_new();

  if (array) {
    for (size_t i = 0; i < array_size(array); i++) {
      AST_NODE_T* child_node = (AST_NODE_T*) array_get(array, i);

      if (child_node) {
        VALUE rb_child = rb_node_from_c_struct(child_node);
        rb_ary_push(rb_array, rb_child);
      }
    }
  }

  return rb_array;
}
