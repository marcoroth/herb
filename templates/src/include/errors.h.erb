#ifndef ERBX_ERRORS_H
#define ERBX_ERRORS_H

#include "array.h"
#include "buffer.h"
#include "errors.h"
#include "location.h"
#include "token.h"

typedef enum {
<%- errors.each do |error| -%>
  <%= error.type.upcase %>,
<%- end -%>
} error_type_T;

typedef struct ERROR_STRUCT {
  error_type_T type;
  location_T* start;
  location_T* end;
  char* message;
} ERROR_T;

<%- errors.each do |error| -%>
<%- arguments = error.fields.any? ? error.fields.map { |field| [field.c_type, " ", field.name, ";"].join }.join("\n  ") : "/* no additional fields */" -%>

typedef struct {
  ERROR_T base;
  <%= arguments %>
} <%= error.struct_type %>;
<%- end -%>

<%- errors.each do |error| -%>
<%- error_arguments = error.fields.any? ? error.fields.map { |field| [field.c_type, " ", field.name].join } : [] -%>
<%- arguments = error_arguments + ["location_T* start", "location_T* end"] -%>
<%= error.struct_type %>* <%= error.human %>_init(<%= arguments.join(", ") %>);
void append_<%= error.human %>(<%= (arguments << "array_T* errors").join(", ") %>);
<%- end -%>

void error_init(ERROR_T* error, error_type_T type, location_T* start, location_T* end);

size_t error_sizeof(void);
error_type_T error_type(ERROR_T* error);

char* error_message(ERROR_T* error);

const char* error_type_to_string(ERROR_T* error);
const char* error_human_type(ERROR_T* error);

void error_free(ERROR_T* error);

void error_pretty_print(ERROR_T* error, size_t indent, size_t relative_indent, buffer_T* buffer);

void error_pretty_print_array(
  const char* name, array_T* array, size_t indent, size_t relative_indent, bool last_property,
  buffer_T* buffer
);

#endif
