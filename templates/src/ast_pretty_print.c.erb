#include "include/ast_node.h"
#include "include/ast_nodes.h"
#include "include/buffer.h"
#include "include/errors.h"
#include "include/pretty_print.h"
#include "include/token_struct.h"
#include "include/util.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

void ast_pretty_print_node(AST_NODE_T* node, const size_t indent, const size_t relative_indent, buffer_T* buffer) {
  if (!node) { return; }

  bool print_locations = true;

  buffer_append(buffer, "@ ");
  buffer_append(buffer, ast_node_human_type(node));
  buffer_append(buffer, " ");

  if (print_locations) { pretty_print_locations(node->start, node->end, buffer); }

  buffer_append(buffer, "\n");

  switch (node->type) {
    <%- nodes.each do |node| -%>
    case <%= node.type %>: {
      const <%= node.struct_type %>* <%= node.human %> = (<%= node.struct_type %>*) node;

      pretty_print_errors(node, indent, relative_indent, <%= node.fields.none? %>, buffer);
      <%- node.fields.each_with_index do |field, index| -%>
      <%- last = index == node.fields.length - 1 -%>
      <%- case field -%>
      <%- when Herb::Template::TokenField -%>
      pretty_print_token_property(<%= node.human %>-><%= field.name %>, "<%= field.name %>", indent, relative_indent, <%= last %>, buffer);
      <%- when Herb::Template::ArrayField -%>
      pretty_print_array("<%= field.name %>", <%= node.human %>-><%= field.name %>, indent, relative_indent, <%= last %>, buffer);
      <%- when Herb::Template::BooleanField -%>
      pretty_print_property("<%= field.name %>", (<%= node.human %>-><%= field.name %> ? "true" : "false"), indent, relative_indent, <%= last %>, buffer);
      <%- when Herb::Template::StringField -%>
      pretty_print_string_property(<%= node.human %>-><%= field.name %>, "<%= field.name %>", indent, relative_indent, <%= last %>, buffer);
      <%- when Herb::Template::NodeField -%>

      pretty_print_label("<%= field.name %>", indent, relative_indent, <%= last %>, buffer);

      if (<%= node.human %>-><%= field.name %>) {
        buffer_append(buffer, "\n");
        pretty_print_indent(buffer, indent);
        pretty_print_indent(buffer, relative_indent + 1);

        buffer_append(buffer, "└── ");
        ast_pretty_print_node((AST_NODE_T*) <%= node.human %>-><%= field.name %>, indent, relative_indent + 2, buffer);
      } else {
        buffer_append(buffer, " ∅\n");
      }
      buffer_append(buffer, "\n");

      <%- else -%>
      <%= field.inspect %>
      <%- end -%>
      <%- end -%>
    } break;

    <%- end -%>
  }
}
