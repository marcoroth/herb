<%- base_arguments = [["type", "String"], ["location", "Location"], ["message", "String"]] -%>
module Herb
  module Errors
    class Error
      <%- base_arguments.each do |argument, type| -%>
      attr_reader :<%= argument %> #: <%= type %>
      <%- end -%>

      #: (<%= base_arguments.map { |_argument, type| type }.join(", ") %>) -> void
      def initialize(<%= base_arguments.map(&:first).join(", ") %>)
        <%- base_arguments.each do |argument, _type| -%>
        @<%= argument %> = <%= argument %>
        <%- end -%>
      end

      #: () -> serialized_error
      def to_hash
        {
          type: type,
          location: location&.to_hash,
          message: message,
        }
      end

      #: (Hash) -> Error
      def self.from_hash(data)
        type = data[:type] || data["type"] || ""
        location = Location.from_hash(data[:location] || data["location"] || {})
        message = data[:message] || data["message"] || ""

        case type
        <%- errors.each do |error| -%>
        when "<%= error.type %>"
          <%= error.name %>.from_hash(data)
        <%- end -%>
        else
          new(type, location, message)
        end
      end

      #: () -> String
      def class_name
        self.class.name || "Error"
      end

      #: () -> String
      def error_name
        class_name.split("::").last || "Error"
      end

      #: (?untyped) -> String
      def to_json(state = nil)
        to_hash.to_json(state)
      end

      #: (?Integer) -> String
      def tree_inspect(_indent = 0)
        raise NotImplementedError
      end
    end

    <%- errors.each do |error| -%>
    class <%= error.name -%> < Error
      <%- error.fields.each do |field| -%>
      attr_reader :<%= field.name %> #: <%= field.ruby_type %>
      <%- end -%>

      #: (<%= [*base_arguments.map(&:last), *error.fields.map(&:ruby_type)].join(", ") %>) -> void
      def initialize(<%= [*base_arguments.map(&:first), *error.fields.map(&:name)].join(", ") %>)
        super(<%= base_arguments.map(&:first).join(", ") %>)

        <%- error.fields.each do |field| -%>
        @<%= field.name %> = <%= field.name %>
        <%- end -%>
      end

      #: () -> String
      def inspect
        tree_inspect.rstrip.gsub(/\s+$/, "")
      end

      #: () -> serialized_<%= error.human %>
      def to_hash
        super.merge({
          <%- error.fields.each do |field| -%>
          <%= field.name %>: <%= field.name %>,
          <%- end -%>
        }) #: Herb::serialized_<%= error.human %>
      end

      #: (Hash) -> <%= error.name %>
      def self.from_hash(data)
        type = data[:type] || data["type"] || ""
        location = Location.from_hash(data[:location] || data["location"] || {})
        message = data[:message] || data["message"] || ""
        <%- error.fields.each do |field| -%>
        <%- case field -%>
        <%- when Herb::Template::StringField -%>
        <%= field.name %> = data[:<%= field.name %>] || data["<%= field.name %>"] || ""
        <%- when Herb::Template::TokenField -%>
        <%= field.name %> = data[:<%= field.name %>] ? Herb::Token.from_hash(data[:<%= field.name %>] || data["<%= field.name %>"]) : nil
        <%- else -%>
        <%= field.name %> = data[:<%= field.name %>] || data["<%= field.name %>"]
        <%- end -%>
        <%- end -%>

        new(type, location, message, <%= error.fields.map(&:name).join(", ") %>)
      end

      #: (?Integer) -> String
      def tree_inspect(indent = 0)
        output = +""

        output += %(@ #{error_name} #{location.tree_inspect}\n)
        <%- symbol = error.fields.none? ? "└──" : "├──" -%>
        output += %(<%= symbol %> message: #{message.inspect}\n)
        <%- error.fields.each do |field| -%>
        <%- symbol = error.fields.last == field ? "└──" : "├──" -%>
        <%- name = "#{symbol} #{field.name}: " -%>
        <%- case field -%>
        <%- when Herb::Template::PositionField -%>
        output += %(<%= name %>#{<%= field.name %> ? <%= field.name %>.tree_inspect : "∅"}\n)
        <%- when Herb::Template::TokenField -%>
        output += %(<%= name %>#{<%= field.name %> ? <%= field.name %>.tree_inspect : "∅"}\n)
        <%- when Herb::Template::TokenTypeField -%>
        output += %(<%= name %>#{<%= field.name %>.inspect}\n)
        <%- when Herb::Template::StringField -%>
        output += %(<%= name %>#{<%= field.name %>.inspect}\n)
        <%- else -%>
        output += "<%= name %>'#{<%= field.name %>.class}'\n"
        <%- end -%>
        <%- end -%>
        output += %(\n)

        output.gsub(/^/, "    " * indent)
      end
    end

    <%- end -%>
  end
end
