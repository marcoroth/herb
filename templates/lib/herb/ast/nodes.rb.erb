<%- serialized_range = "[Integer, Integer]" -%>
<%- serialized_position = "{ line: Integer, column: Integer }" -%>
<%- serialized_location = "{ start: #{serialized_position}, end: #{serialized_position} }" -%>
<%- serialized_error = "{ type: String, location: #{serialized_location}, message: String }" -%>
<%- serialized_warning = "{ type: String, location: #{serialized_location}, message: String }" -%>
<%- serialized_node = "{ type: String, location: #{serialized_location}, errors: Array[#{serialized_error}] }" -%>
<%- serialized_token = "{ value: String, range: #{serialized_range}, location: #{serialized_location}, type: String }" -%>

module Herb
  module AST
    <%- nodes.each do |node| -%>
    class <%= node.name -%> < Node
      <%- node.fields.each do |field| -%>
      <%- if field.is_a?(Herb::Template::TokenField) || field.is_a?(Herb::Template::NodeField) -%>
      #: <%= field.ruby_type %>?
      attr_reader :<%= field.name %> #: <%= field.ruby_type %>?
      <%- else -%>
      #: <%= field.ruby_type %>
      attr_reader :<%= field.name %> #: <%= field.ruby_type %>
      <%- end -%>

      <%- end -%>
      #: (<%= ["String", "Location", "Array[Herb::Errors::Error]", *node.fields.map(&:ruby_type)].join(", ") %>) -> void
      def initialize(<%= ["type", "location", "errors", *node.fields.map(&:name)].join(", ") %>)
        super(type, location, errors)
        <%- node.fields.each do |field| -%>
        <%- if field.is_a?(Herb::Template::StringField) -%>
        @<%= field.name %> = <%= field.name %>.force_encoding("utf-8")
        <%- else -%>
        @<%= field.name %> = <%= field.name %>
        <%- end -%>
        <%- end -%>
      end

      #: () -> {
      #|   type: String,
      #|   location: <%= serialized_location %>,
      #|   errors: Array[<%= serialized_error %>],
      <%- node.fields.each do |field| -%>
      <%- if field.is_a?(Herb::Template::ArrayField) && field.specific_kind == "Node" -%>
      #|   <%= field.name %>: Array[<%= serialized_node %>],
      <%- elsif field.is_a?(Herb::Template::TokenField) -%>
      #|   <%= field.name %>: <%= serialized_token %>,
      <%- elsif field.is_a?(Herb::Template::NodeField) -%>
      #|   <%= field.name %>: <%= serialized_node %>,
      <%- else -%>
      #|   <%= field.name %>: <%= field.ruby_type %>,
      <%- end -%>
      <%- end -%>
      #| }
      def to_hash
        super.merge({
          <%- node.fields.each do |field| -%>
          <%- if field.is_a?(Herb::Template::TokenField) || field.is_a?(Herb::Template::NodeField) -%>
          <%= field.name %>: <%= field.name %>&.to_hash,
          <%- elsif field.is_a?(Herb::Template::ArrayField) -%>
          <%= field.name %>: <%= field.name %>.map(&:to_hash),
          <%- else -%>
          <%= field.name %>: <%= field.name %>,
          <%- end -%>
          <%- end -%>
        })
      end

      #: () -> String
      def inspect
        tree_inspect.rstrip.gsub(/\s+$/, "")
      end

      #: (?Integer) -> String
      def tree_inspect(indent = 0)
        output = +""

        output += "@ #{node_name} "
        output += location.tree_inspect
        output += "\n"

        output += inspect_errors(prefix: "<%= node.fields.any? ? "│   " : "    " %>")

        <%- node.fields.each do |field| -%>
        <%- symbol = node.fields.last == field ? "└──" : "├──" -%>
        <%- name = "#{symbol} #{field.name}: " -%>
        <%- case field -%>
        <%- when Herb::Template::StringField -%>
        output += %(<%= name %>#{<%= field.name %>.inspect}\n)
        <%- when Herb::Template::TokenField -%>
        output += "<%= name %>"
        output += <%= field.name %> ? <%= field.name %>.tree_inspect : "∅"
        output += "\n"
        <%- when Herb::Template::BooleanField -%>
        output += "<%= name %>"
        output += [true, false].include?(<%= field.name %>) ? <%= field.name %>.to_s : "∅"
        output += "\n"
        <%- when Herb::Template::PrismNodeField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::AnalyzedRubyField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::NodeField -%>
        output += "<%= name %>"
        if <%= field.name %>
          <%- prefix = (node.fields.last == field) ? "    " : "│   " -%>
          output += "\n"
          <%- if (node.fields.last == field) -%>
          output += "    └── "
          <%- else -%>
          output += "│   └── "
          <%- end -%>
          output += <%= field.name %>.tree_inspect(indent).gsub(/^/, "    " * (indent + 1)).lstrip.gsub(/^/, "<%= prefix %>").delete_prefix("<%= prefix %>")
        else
          output += "∅\n"
        end
        <%- when Herb::Template::ArrayField -%>
        output += "<%= name %>"
        output += inspect_array(<%= field.name %>, prefix: "<%= (node.fields.last == field) ? "    " : "│   " %>")
        <%- else -%>
        <%- raise "Unhandled type: #{field.class}" -%>
        <%- end -%>
        <%- end -%>
        output += "\n"

        output.gsub(/^/, "    " * indent)
      end
    end

    <%- end -%>
  end
end
