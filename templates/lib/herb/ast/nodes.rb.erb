module Herb
  module AST
    # Dynamically reopen Node class to add node_from_hash method with knowledge of all node types
    class Node
      #: (Hash[untyped, untyped]?) -> Node?
      def self.node_from_hash(data)
        return nil unless data

        node_type = data[:type] || data["type"]
        return nil unless node_type

        case node_type
        <%- nodes.each do |node| -%>
        when "<%= node.type %>"
          <%= node.name %>.from_hash(data)
        <%- end -%>
        end
      end
    end

    <%- nodes.each do |node| -%>
    class <%= node.name -%> < Node
      <%- node.fields.each do |field| -%>
      attr_reader :<%= field.name %> #: <%= field.ruby_type %>
      <%- end -%>

      #: (<%= ["String", "Location?", "Array[Herb::Errors::Error]", *node.fields.map(&:ruby_type)].join(", ") %>) -> void
      def initialize(<%= ["type", "location", "errors", *node.fields.map(&:name)].join(", ") %>)
        super(type, location, errors)
        <%- node.fields.each do |field| -%>
        <%- if field.is_a?(Herb::Template::StringField) -%>
        @<%= field.name %> = <%= field.name %>.force_encoding("utf-8")
        <%- else -%>
        @<%= field.name %> = <%= field.name %>
        <%- end -%>
        <%- end -%>
      end

      #: () -> serialized_<%= node.human %>
      def to_hash
        super.merge({
          <%- node.fields.each do |field| -%>
          <%- case field -%>
          <%- when Herb::Template::NodeField -%>
          <%= field.name %>: <%= field.name %>&.to_hash,
          <%- when Herb::Template::ArrayField -%>
          <%- if field.specific_kind&.end_with?("Node") -%>
          <%= field.name %>: <%= field.name %>.map(&:to_hash),
          <%- else -%>
          <%= field.name %>: <%= field.name %>,
          <%- end -%>
          <%- when Herb::Template::TokenField -%>
          <%= field.name %>: <%= field.name %>&.to_hash,
          <%- else -%>
          <%= field.name %>: <%= field.name %>,
          <%- end -%>
          <%- end -%>
        }) #: Herb::serialized_<%= node.human %>
      end

      #: (Hash[untyped, untyped]) -> <%= node.name %>
      def self.from_hash(data)
        location = Location.from_hash(data[:location] || data["location"])
        errors = (data[:errors] || data["errors"] || []).map { |error| Herb::Errors::Error.from_hash(error) }
        <%- node.fields.each do |field| -%>
        <%- case field -%>
        <%- when Herb::Template::StringField -%>
        <%= field.name %> = data[:<%= field.name %>] || data["<%= field.name %>"] || ""
        <%- when Herb::Template::TokenField -%>
        <%= field.name %> = data[:<%= field.name %>] ? Herb::Token.from_hash(data[:<%= field.name %>] || data["<%= field.name %>"]) : nil
        <%- when Herb::Template::BooleanField -%>
        <%= field.name %> = if data.key?(:<%= field.name %>)
          data[:<%= field.name %>]
        else
          data.key?("<%= field.name %>") ? data["<%= field.name %>"] : false
        end
        <%- when Herb::Template::NodeField -%>
        <%- if field.specific_kind -%>
        <%= field.name %>_node = data[:<%= field.name %>] ? Herb::AST::Node.node_from_hash(data[:<%= field.name %>] || data["<%= field.name %>"]) : nil
        <%= field.name %> = <%= field.name %>_node #: Herb::AST::<%= field.specific_kind %>?
        <%- else -%>
        <%= field.name %> = data[:<%= field.name %>] ? Herb::AST::Node.node_from_hash(data[:<%= field.name %>] || data["<%= field.name %>"]) : nil
        <%- end -%>
        <%- when Herb::Template::ArrayField -%>
        <%- if field.specific_kind&.end_with?("Node") -%>
        <%= field.name %>_nodes = (data[:<%= field.name %>] || data["<%= field.name %>"] || []).map { |node_data| Herb::AST::Node.node_from_hash(node_data) }.compact
        <%= field.name %> = <%= field.name %>_nodes #: Array[Herb::AST::<%= field.specific_kind %>]
        <%- else -%>
        <%= field.name %> = data[:<%= field.name %>] || data["<%= field.name %>"] || []
        <%- end -%>
        <%- else -%>
        <%= field.name %> = data[:<%= field.name %>] || data["<%= field.name %>"]
        <%- end -%>
        <%- end -%>

        new("<%= node.type %>", location, errors, <%= node.fields.map(&:name).join(", ") %>)
      end

      #: (Visitor) -> void
      def accept(visitor)
        visitor.visit_<%= node.human %>(self)
      end

      #: () -> Array[Herb::AST::Node?]
      def child_nodes
        [<%= node.fields.map { |field|
          if field.is_a?(Herb::Template::NodeField)
            field.name
          elsif field.is_a?(Herb::Template::ArrayField) && field.specific_kind.end_with?("Node")
            "*#{field.name}"
          else
            nil
          end
        }.compact.join(", ") %>]
      end

      #: () -> Array[Herb::AST::Node]
      def compact_child_nodes
        child_nodes.compact
      end

      #: () -> String
      def inspect
        tree_inspect.rstrip.gsub(/\s+$/, "")
      end

      #: (?Integer) -> String
      def tree_inspect(indent = 0)
        output = +""

        output += "@ #{node_name} "
        output += location&.tree_inspect || "(?)"
        output += "\n"

        output += inspect_errors(prefix: "<%= node.fields.any? ? "│   " : "    " %>")

        <%- node.fields.each do |field| -%>
        <%- symbol = node.fields.last == field ? "└──" : "├──" -%>
        <%- name = "#{symbol} #{field.name}: " -%>
        <%- case field -%>
        <%- when Herb::Template::StringField -%>
        output += %(<%= name %>#{<%= field.name %>.inspect}\n)
        <%- when Herb::Template::TokenField -%>
        output += "<%= name %>"
        output += <%= field.name %> ? <%= field.name %>.tree_inspect : "∅"
        output += "\n"
        <%- when Herb::Template::BooleanField -%>
        output += "<%= name %>"
        output += [true, false].include?(<%= field.name %>) ? <%= field.name %>.to_s : "∅"
        output += "\n"
        <%- when Herb::Template::PrismNodeField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::AnalyzedRubyField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::NodeField -%>
        output += "<%= name %>"
        if <%= field.name %>
          <%- prefix = (node.fields.last == field) ? "    " : "│   " -%>
          output += "\n"
          <%- if (node.fields.last == field) -%>
          output += "    └── "
          <%- else -%>
          output += "│   └── "
          <%- end -%>
          output += <%= field.name %>.tree_inspect(indent).gsub(/^/, "    " * (indent + 1)).lstrip.gsub(/^/, "<%= prefix %>").delete_prefix("<%= prefix %>")
        else
          output += "∅\n"
        end
        <%- when Herb::Template::ArrayField -%>
        output += "<%= name %>"
        output += inspect_array(<%= field.name %>, prefix: "<%= (node.fields.last == field) ? "    " : "│   " %>")
        <%- else -%>
        <%- raise "Unhandled type: #{field.class}" -%>
        <%- end -%>
        <%- end -%>
        output += "\n"

        output.gsub(/^/, "    " * indent)
      end
    end

    <%- end -%>
  end
end
