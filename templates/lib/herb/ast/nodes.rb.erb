module Herb
  module AST
    <%- nodes.each do |node| -%>
    class <%= node.name -%> < Node
      <%- node.fields.each do |field| -%>
      attr_reader :<%= field.name %>
      <%- end -%>

      def initialize(<%= ["type", "location", "errors", *node.fields.map(&:name)].join(", ") %>)
        super(type, location, errors)
        <%- node.fields.each do |field| -%>
        <%- if field.is_a?(Herb::Template::StringField) -%>
        @<%= field.name %> = <%= field.name %>.force_encoding("utf-8")
        <%- else -%>
        @<%= field.name %> = <%= field.name %>
        <%- end -%>
        <%- end -%>
      end

      def to_hash
        super.merge({
          <%- node.fields.each do |field| -%>
          <%= field.name %>: <%= field.name %>,
          <%- end -%>
        })
      end

      def inspect
        tree_inspect.rstrip.gsub(/\s+$/, "")
      end

      def tree_inspect(indent = 0)
        output = +""

        output += "@ #{node_name} "
        output += location.tree_inspect
        output += "\n"

        output += inspect_errors(prefix: "<%= node.fields.any? ? "│   " : "    " %>")

        <%- node.fields.each do |field| -%>
        <%- symbol = node.fields.last == field ? "└──" : "├──" -%>
        <%- name = "#{symbol} #{field.name}: " -%>
        <%- case field -%>
        <%- when Herb::Template::StringField -%>
        output += %(<%= name %>#{<%= field.name %>.inspect}\n)
        <%- when Herb::Template::TokenField -%>
        output += "<%= name %>"
        output += <%= field.name %> ? <%= field.name %>.tree_inspect : "∅"
        output += "\n"
        <%- when Herb::Template::BooleanField -%>
        output += "<%= name %>"
        output += [true, false].include?(<%= field.name %>) ? <%= field.name %>.to_s : "∅"
        output += "\n"
        <%- when Herb::Template::PrismNodeField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::AnalyzedRubyField -%>
        # no-op for <%= field.name %>
        <%- when Herb::Template::NodeField -%>
        output += "<%= name %>"
        if <%= field.name %>
          <%- prefix = (node.fields.last == field) ? "    " : "│   " -%>
          output += "\n"
          <%- if (node.fields.last == field) -%>
          output += "    └── "
          <%- else -%>
          output += "│   └── "
          <%- end -%>
          output += <%= field.name %>.tree_inspect(indent).gsub(/^/, "    " * (indent + 1)).lstrip.gsub(/^/, "<%= prefix %>").delete_prefix("<%= prefix %>")
        else
          output += "∅\n"
        end
        <%- when Herb::Template::ArrayField -%>
        output += "<%= name %>"
        output += inspect_array(<%= field.name %>, prefix: "<%= (node.fields.last == field) ? "    " : "│   " %>")
        <%- else -%>
        <%- raise "Unhandled type: #{field.class}" -%>
        <%- end -%>
        <%- end -%>
        output += "\n"

        output.gsub(/^/, "    " * indent)
      end
    end

    <%- end -%>
  end
end
