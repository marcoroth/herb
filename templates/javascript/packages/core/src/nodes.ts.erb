import { Node } from "./node.js"
import { Location, SerializedLocation } from "./location.js"
import { Token, SerializedToken } from "./token.js"
import { HerbError, SerializedHerbError } from "./error.js"

import type { SerializedNode, BaseNodeProps } from "./node.js"

export function fromSerializedNode(node: SerializedNode): Node {
  switch (node.type) {
    <%- nodes.each do |node| -%>
    case "<%= node.type %>": return <%= node.name %>.from(node as Serialized<%= node.name %>);
    <%- end -%>

    default:
      throw new Error(`Unknown node type: ${node.type}`);
  }
}
export type SerializedNodeType = string

export type NodeType =
  <%- nodes.each_with_index.map do |node, index| -%>
  | "<%= node.type %>"
  <%- end -%>

<%- nodes.each do |node| -%>
export interface Serialized<%= node.name %> extends SerializedNode {
  type: "<%= node.type %>";
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  <%= field.name %>: SerializedToken | null;
  <%- when Herb::Template::BooleanField -%>
  <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  <%= field.name %>: SerializedNode | null;
  <%- when Herb::Template::ArrayField -%>
  <%= field.name %>: SerializedNode[];
  <%- else -%>
  <%= field.name %>: any; // <%= field.inspect %>
  <%- end -%>
  <%- end -%>
}

export interface <%= node.name %>Props extends BaseNodeProps {
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  <%= field.name %>: Token | null;
  <%- when Herb::Template::BooleanField -%>
  <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  <%= field.name %>: Node | null;
  <%- when Herb::Template::ArrayField -%>
  <%= field.name %>: Node[];
  <%- else -%>
  <%= field.name %>: any; // <%= field.inspect %>
  <%- end -%>
  <%- end -%>
}

export class <%= node.name %> extends Node {
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  readonly <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  readonly <%= field.name %>: Token | null;
  <%- when Herb::Template::BooleanField -%>
  readonly <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  readonly <%= field.name %>: Node | null;
  <%- when Herb::Template::ArrayField -%>
  readonly <%= field.name %>: Node[];
  <%- else -%>
  readonly <%= field.name %>: any;
  <%- end -%>
  <%- end -%>

  static from(data: Serialized<%= node.name %>): <%= node.name %> {
    return new <%= node.name %>({
      type: data.type,
      location: Location.from(data.location),
      errors: (data.errors || []).map(error => HerbError.from(error)),
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::StringField -%>
      <%= field.name %>: data.<%= field.name %>,
      <%- when Herb::Template::TokenField -%>
      <%= field.name %>: data.<%= field.name %> ? Token.from(data.<%= field.name %>) : null,
      <%- when Herb::Template::BooleanField -%>
      <%= field.name %>: data.<%= field.name %>,
      <%- when Herb::Template::NodeField -%>
      <%= field.name %>: data.<%= field.name %> ? fromSerializedNode((data.<%= field.name %> as any)) : null,
      <%- when Herb::Template::ArrayField -%>
      <%= field.name %>: (data.<%= field.name %> || []).map(node => fromSerializedNode(node)),
      <%- else -%>
      <%= field.name %>: data.<%= field.name %>,
      <%- end -%>
      <%- end -%>
    })
  }

  constructor(props: <%= node.name %>Props) {
    super(props.type, props.location, props.errors);
    <%- node.fields.each do |field| -%>
    <%- case field -%>
    <%- when Herb::Template::ArrayField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::TokenField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::NodeField -%>
    this.<%= field.name %> = props.<%= field.name %>
    <%- else -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- end -%>
    <%- end -%>
  }

  childNodes(): Node[] {
    return [
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::NodeField -%>
      this.<%= field.name %>,
      <%- when Herb::Template::ArrayField -%>
      ...this.<%= field.name %>,
      <%- end -%>
      <%- end -%>
    ].filter(node => node !== null && node !== undefined) as Node[];
  }

  recursiveErrors(): HerbError[] {
    return [
      ...this.errors,
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::NodeField -%>
      this.<%= field.name %> ? this.<%= field.name %>.recursiveErrors() : [],
      <%- when Herb::Template::ArrayField -%>
      ...this.<%= field.name %>.map(node => node.recursiveErrors()),
      <%- end -%>
      <%- end -%>
    ].flat();
  }

  toJSON(): Serialized<%= node.name %> {
    return {
      ...super.toJSON(),
      type: "<%= node.type %>",
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::StringField -%>
      <%= field.name %>: this.<%= field.name %>,
      <%- when Herb::Template::TokenField -%>
      <%= field.name %>: this.<%= field.name %> ? this.<%= field.name %>.toJSON() : null,
      <%- when Herb::Template::BooleanField -%>
      <%= field.name %>: this.<%= field.name %>,
      <%- when Herb::Template::NodeField -%>
      <%= field.name %>: this.<%= field.name %> ? this.<%= field.name %>.toJSON() : null,
      <%- when Herb::Template::ArrayField -%>
      <%= field.name %>: this.<%= field.name %>.map(node => node.toJSON()),
      <%- else -%>
      <%= field.name %>: this.<%= field.name %>,
      <%- end -%>
      <%- end -%>
    };
  }

  treeInspect(): string {
    let output = "";

    output += `@ <%= node.name %> ${this.location.treeInspectWithLabel()}\n`;
    output += `├── errors: ${this.inspectArray(this.errors, "<%= node.fields.any? ? "│   " : "    " %>")}`;
    <%- node.fields.each do |field| -%>
    <%- symbol = node.fields.last == field ? "└──" : "├──" -%>
    <%- name = "#{symbol} #{field.name}: " -%>
    <%- case field -%>
    <%- when Herb::Template::StringField -%>
    output += `<%= name %>${this.<%= field.name %> ? JSON.stringify(this.<%= field.name %>) : "∅"}\n`;
    <%- when Herb::Template::TokenField -%>
    output += `<%= name %>${this.<%= field.name %> ? this.<%= field.name %>.treeInspect() : "∅"}\n`;
    <%- when Herb::Template::BooleanField -%>
    output += `<%= name %>${typeof this.<%= field.name %> === 'boolean' ? String(this.<%= field.name %>) : "∅"}\n`;
    <%- when Herb::Template::NodeField -%>
    output += `<%= name %>${this.inspectNode(this.<%= field.name %>, "<%= (node.fields.last == field) ? "    " : "│   " %>")}`;
    <%- when Herb::Template::ArrayField -%>
    output += `<%= name %>${this.inspectArray(this.<%= field.name %>, "<%= (node.fields.last == field) ? "    " : "│   " %>")}`;
    <%- else -%>
    output += `<%= name %> ${this.<%= field.name %>}\n`;
    <%- end -%>
    <%- end -%>

    // output += "\n";

    return output
  }
}

<%- end -%>
