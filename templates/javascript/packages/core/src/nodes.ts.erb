import { Location } from "./location.js"
import { Token, SerializedToken } from "./token.js"
import { HerbError } from "./errors.js"
import { convertToUTF8 } from "./util.js"

import type { SerializedLocation } from "./location.js"
import type { SerializedHerbError } from "./errors.js"
import type { Visitor } from "./visitor.js"

export type SerializedNodeType = string

export interface SerializedNode {
  type: SerializedNodeType
  location: SerializedLocation
  errors: SerializedHerbError[]
}

export interface BaseNodeProps {
  type: NodeType
  location: Location
  errors: HerbError[]
}

export abstract class Node implements BaseNodeProps {
  readonly type: NodeType
  readonly location: Location
  readonly errors: HerbError[]

  static from(node: SerializedNode): Node {
    return fromSerializedNode(node)
  }

  constructor(type: NodeType, location: Location, errors: HerbError[]) {
    this.type = type
    this.location = location
    this.errors = errors
  }

  toJSON(): SerializedNode {
    return {
      type: this.type,
      location: this.location.toJSON(),
      errors: this.errors,
    }
  }

  inspect(): string {
    return this.treeInspect(0)
  }

  get isSingleLine(): boolean {
    return this.location.start.line === this.location.end.line
  }

  abstract treeInspect(indent?: number): string
  abstract recursiveErrors(): HerbError[]
  abstract accept(visitor: Visitor): void
  abstract childNodes(): (Node | null | undefined)[]
  abstract compactChildNodes(): Node[]

  protected inspectArray(
    array: (Node | HerbError)[] | null | undefined,
    prefix: string,
  ): string {
    if (!array) return "∅\n"
    if (array.length === 0) return "[]\n"

    let output = `(${array.length} item${array.length == 1 ? "" : "s"})\n`

    array.forEach((item, index) => {
      const isLast = index === array.length - 1

      if (item instanceof Node || item instanceof HerbError) {
        output += this.inspectNode(
          item,
          prefix,
          isLast ? "    " : "│   ",
          isLast,
          false,
        )
      } else {
        const symbol = isLast ? "└── " : "├── "
        output += `${prefix}${symbol} ${item}\n`
      }
    })

    output += `${prefix}\n`

    return output
  }

  protected inspectNode(
    node: Node | HerbError | undefined | null,
    prefix: string,
    prefix2: string = "    ",
    last: boolean = true,
    trailingNewline: boolean = true,
  ): string {
    if (!node) return "∅\n"

    let output = trailingNewline ? "\n" : ""
    output += `${prefix}`

    output += last ? "└── " : "├── "
    output += node
      .treeInspect()
      .trimStart()
      .split("\n")
      .map((line, index) =>
        index == 0 ? line.trimStart() : `${prefix}${prefix2}${line}`,
      )
      .join("\n")
      .trimStart()

    output += `\n`

    return output
  }
}

<%- nodes.each do |node| -%>
export interface Serialized<%= node.name %> extends SerializedNode {
  type: "<%= node.type %>";
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  <%= field.name %>: SerializedToken | null;
  <%- when Herb::Template::BooleanField -%>
  <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  <%= field.name %>: SerializedNode | null;
  <%- when Herb::Template::ArrayField -%>
  <%= field.name %>: SerializedNode[];
  <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
  // no-op for <%= field.name %>
  <%- else -%>
  <% raise "Unhandled class #{field.class}" %>
  <%- end -%>
  <%- end -%>
}

export interface <%= node.name %>Props extends BaseNodeProps {
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  <%= field.name %>: Token | null;
  <%- when Herb::Template::BooleanField -%>
  <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  <%= field.name %>: Node | null;
  <%- when Herb::Template::ArrayField -%>
  <%- if field.specific_kind == "Node" -%>
  <%= field.name %>: Node[];
  <%- else -%>
  <%= field.name %>: any[];
  <%- end -%>
  <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
  // no-op for <%= field.name %>
  <%- else -%>
  <% raise "Unhandled class #{field.class}" %>
  <%- end -%>
  <%- end -%>
}

export class <%= node.name %> extends Node {
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Herb::Template::StringField -%>
  readonly <%= field.name %>: string;
  <%- when Herb::Template::TokenField -%>
  readonly <%= field.name %>: Token | null;
  <%- when Herb::Template::BooleanField -%>
  readonly <%= field.name %>: boolean;
  <%- when Herb::Template::NodeField -%>
  readonly <%= field.name %>: Node | null;
  <%- when Herb::Template::ArrayField -%>
  <%- if field.specific_kind == "Node" -%>
  readonly <%= field.name %>: Node[];
  <%- else -%>
  readonly <%= field.name %>: any[];
  <%- end -%>
  <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
  // no-op for <%= field.name %>
  <%- else -%>
  <% raise "Unhandled class #{field.class}" %>
  <%- end -%>
  <%- end -%>

  static from(data: Serialized<%= node.name %>): <%= node.name %> {
    return new <%= node.name %>({
      type: data.type,
      location: Location.from(data.location),
      errors: (data.errors || []).map(error => HerbError.from(error)),
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::StringField -%>
      <%= field.name %>: data.<%= field.name %>,
      <%- when Herb::Template::TokenField -%>
      <%= field.name %>: data.<%= field.name %> ? Token.from(data.<%= field.name %>) : null,
      <%- when Herb::Template::BooleanField -%>
      <%= field.name %>: data.<%= field.name %>,
      <%- when Herb::Template::NodeField -%>
      <%= field.name %>: data.<%= field.name %> ? fromSerializedNode((data.<%= field.name %> as any)) : null,
      <%- when Herb::Template::ArrayField -%>
      <%= field.name %>: (data.<%= field.name %> || []).map(node => fromSerializedNode(node)),
      <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
      // no-op for <%= field.name %>
      <%- else -%>
      <% raise "Unhandled class #{field.class}" %>
      <%- end -%>
      <%- end -%>
    })
  }

  constructor(props: <%= node.name %>Props) {
    super(props.type, props.location, props.errors);
    <%- node.fields.each do |field| -%>
    <%- case field -%>
    <%- when Herb::Template::ArrayField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::TokenField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::NodeField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::StringField -%>
    this.<%= field.name %> = convertToUTF8(props.<%= field.name %>);
    <%- when Herb::Template::BooleanField -%>
    this.<%= field.name %> = props.<%= field.name %>;
    <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
    // no-op for <%= field.name %>
    <%- else -%>
    <% raise "Unhandled class #{field.class}" %>
    <%- end -%>
    <%- end -%>
  }

  accept(visitor: Visitor): void {
    visitor.visit<%= node.name %>(this)
  }

  childNodes(): (Node | null | undefined)[] {
    return [
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::NodeField -%>
      this.<%= field.name %>,
      <%- when Herb::Template::ArrayField -%>
      ...this.<%= field.name %>,
      <%- end -%>
      <%- end -%>
    ];
  }

  compactChildNodes(): Node[] {
    return this.childNodes().filter(node => node !== null && node !== undefined)
  }

  recursiveErrors(): HerbError[] {
    return [
      ...this.errors,
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::NodeField -%>
      this.<%= field.name %> ? this.<%= field.name %>.recursiveErrors() : [],
      <%- when Herb::Template::ArrayField -%>
      ...this.<%= field.name %>.map(node => node.recursiveErrors()),
      <%- end -%>
      <%- end -%>
    ].flat();
  }

  toJSON(): Serialized<%= node.name %> {
    return {
      ...super.toJSON(),
      type: "<%= node.type %>",
      <%- node.fields.each do |field| -%>
      <%- case field -%>
      <%- when Herb::Template::StringField -%>
      <%= field.name %>: this.<%= field.name %>,
      <%- when Herb::Template::TokenField -%>
      <%= field.name %>: this.<%= field.name %> ? this.<%= field.name %>.toJSON() : null,
      <%- when Herb::Template::BooleanField -%>
      <%= field.name %>: this.<%= field.name %>,
      <%- when Herb::Template::NodeField -%>
      <%= field.name %>: this.<%= field.name %> ? this.<%= field.name %>.toJSON() : null,
      <%- when Herb::Template::ArrayField -%>
      <%= field.name %>: this.<%= field.name %>.map(node => node.toJSON()),
      <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
      // no-op for <%= field.name %>
      <%- else -%>
      <% raise "Unhandled class #{field.class}" %>
      <%- end -%>
      <%- end -%>
    };
  }

  treeInspect(): string {
    let output = "";

    output += `@ <%= node.name %> ${this.location.treeInspectWithLabel()}\n`;
    output += `├── errors: ${this.inspectArray(this.errors, "<%= node.fields.any? ? "│   " : "    " %>")}`;
    <%- node.fields.each do |field| -%>
    <%- symbol = node.fields.last == field ? "└──" : "├──" -%>
    <%- name = "#{symbol} #{field.name}: " -%>
    <%- case field -%>
    <%- when Herb::Template::StringField -%>
    output += `<%= name %>${this.<%= field.name %> ? JSON.stringify(this.<%= field.name %>) : "∅"}\n`;
    <%- when Herb::Template::TokenField -%>
    output += `<%= name %>${this.<%= field.name %> ? this.<%= field.name %>.treeInspect() : "∅"}\n`;
    <%- when Herb::Template::BooleanField -%>
    output += `<%= name %>${typeof this.<%= field.name %> === 'boolean' ? String(this.<%= field.name %>) : "∅"}\n`;
    <%- when Herb::Template::NodeField -%>
    output += `<%= name %>${this.inspectNode(this.<%= field.name %>, "<%= (node.fields.last == field) ? "    " : "│   " %>")}`;
    <%- when Herb::Template::ArrayField -%>
    output += `<%= name %>${this.inspectArray(this.<%= field.name %>, "<%= (node.fields.last == field) ? "    " : "│   " %>")}`;
    <%- when Herb::Template::PrismNodeField, Herb::Template::AnalyzedRubyField -%>
    // no-op for <%= field.name %>
    <%- else -%>
    <% raise "Unhandled class #{field.class}" %>
    <%- end -%>
    <%- end -%>

    // output += "\n";

    return output
  }
}

<%- end -%>

export function fromSerializedNode(node: SerializedNode): Node {
  switch (node.type) {
    <%- nodes.each do |node| -%>
    case "<%= node.type %>": return <%= node.name %>.from(node as Serialized<%= node.name %>);
    <%- end -%>

    default:
      throw new Error(`Unknown node type: ${node.type}`);
  }
}

export type NodeType =
  <%- nodes.each_with_index.map do |node, index| -%>
  | "<%= node.type %>"
  <%- end -%>

export type ERBNodeType = Extract<NodeType, `AST_ERB_${string}`>;

export type ERBNode =
  <%- nodes.each_with_index.map do |node, index| -%>
    <%- next unless node.name.start_with?("ERB") -%>
  | <%= node.name %>
  <%- end -%>

export const ERBNodeClasses = [
  <%- nodes.each_with_index.map do |node, index| -%>
  <%- next unless node.name.start_with?("ERB") -%>
  <%= node.name %>,
  <%- end -%>
]

export function isERBNode(node: Node): node is ERBNode {
  return ERBNodeClasses.some(NodeClass => node instanceof NodeClass);
}
