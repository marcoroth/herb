import {
  Node,
  <%- nodes.each do |node| -%>
  <%= node.name %>,
  <%- end -%>
} from "./nodes.js"

export class Visitor {
  visit(node: Node | null | undefined): void {
    if (!node) return

    node.accept(this)
  }

  visitAll(nodes: (Node | null | undefined)[]): void {
    nodes.forEach(node => node?.accept(this))
  }

  visitChildNodes(node: Node): void {
    node.compactChildNodes().forEach(node => node.accept(this))
  }

  <%- nodes.each do |node| -%>
  visit<%= node.name %>(node: <%= node.name %>): void {
    this.visitChildNodes(node)
  }

  <%- end -%>
}
