# Generated from lib/herb/ast/node.rb with RBS::Inline

module Herb
  module AST
    class Node
      attr_reader type: String

      attr_reader location: Location

      attr_reader errors: Array[Herb::Errors::Error]

      # : (String, Location, Array[Herb::Errors::Error]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error]) -> void

      # : () -> serialized_node
      def to_hash: () -> serialized_node

      # : () -> String
      def class_name: () -> String

      # : () -> String
      def node_name: () -> String

      # : (?untyped) -> String
      def to_json: (?untyped) -> String

      # : (?prefix: String) -> String
      def inspect_errors: (?prefix: String) -> String

      # : (Array[Herb::AST::Node|Herb::Errors::Error], ?item_name: String, ?prefix: String) -> String
      def inspect_array: (Array[Herb::AST::Node | Herb::Errors::Error], ?item_name: String, ?prefix: String) -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      alias deconstruct child_nodes

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> Array[Herb::Errors::Error]
      def recursive_errors: () -> Array[Herb::Errors::Error]
    end
  end
end
