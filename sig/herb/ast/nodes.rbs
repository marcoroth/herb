# Generated from lib/herb/ast/nodes.rb with RBS::Inline

module Herb
  module AST
    class DocumentNode < Node
      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class LiteralNode < Node
      # : String
      attr_reader content: String

      # : (String, Location, Array[Herb::Errors::Error], String) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], String) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   content: String,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLOpenTagNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader tag_name: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : bool
      attr_reader is_void: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], bool) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_name: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   is_void: bool,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLCloseTagNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader tag_name: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_name: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLSelfCloseTagNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader tag_name: Herb::Token?

      # : Array[Herb::AST::HTMLAttributeNode]
      attr_reader attributes: Array[Herb::AST::HTMLAttributeNode]

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : bool
      attr_reader is_void: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Array[Herb::AST::HTMLAttributeNode], Herb::Token, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Array[Herb::AST::HTMLAttributeNode], Herb::Token, bool) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_name: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   attributes: Array[Herb::AST::HTMLAttributeNode],
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   is_void: bool,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLElementNode < Node
      # : Herb::AST::HTMLOpenTagNode?
      attr_reader open_tag: Herb::AST::HTMLOpenTagNode?

      # : Herb::Token?
      attr_reader tag_name: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader body: Array[Herb::AST::Node]

      # : Herb::AST::HTMLCloseTagNode?
      attr_reader close_tag: Herb::AST::HTMLCloseTagNode?

      # : bool
      attr_reader is_void: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLOpenTagNode, Herb::Token, Array[Herb::AST::Node], Herb::AST::HTMLCloseTagNode, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLOpenTagNode, Herb::Token, Array[Herb::AST::Node], Herb::AST::HTMLCloseTagNode, bool) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   open_tag: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   tag_name: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   body: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   close_tag: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   is_void: bool,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeValueNode < Node
      # : Herb::Token?
      attr_reader open_quote: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : Herb::Token?
      attr_reader close_quote: Herb::Token?

      # : bool
      attr_reader quoted: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token, bool) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   open_quote: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   close_quote: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   quoted: bool,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeNameNode < Node
      # : Herb::Token?
      attr_reader name: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   name: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeNode < Node
      # : Herb::AST::HTMLAttributeNameNode?
      attr_reader name: Herb::AST::HTMLAttributeNameNode?

      # : Herb::Token?
      attr_reader equals: Herb::Token?

      # : Herb::AST::HTMLAttributeValueNode?
      attr_reader value: Herb::AST::HTMLAttributeValueNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLAttributeNameNode, Herb::Token, Herb::AST::HTMLAttributeValueNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLAttributeNameNode, Herb::Token, Herb::AST::HTMLAttributeValueNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   name: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   equals: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   value: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLTextNode < Node
      # : String
      attr_reader content: String

      # : (String, Location, Array[Herb::Errors::Error], String) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], String) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   content: String,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLCommentNode < Node
      # : Herb::Token?
      attr_reader comment_start: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : Herb::Token?
      attr_reader comment_end: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   comment_start: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   comment_end: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLDoctypeNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class WhitespaceNode < Node
      # : Herb::Token?
      attr_reader value: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   value: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBContentNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : nil
      attr_reader analyzed_ruby: nil

      # : bool
      attr_reader parsed: bool

      # : bool
      attr_reader valid: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, nil, bool, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, nil, bool, bool) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   analyzed_ruby: nil,
      # |   parsed: bool,
      # |   valid: bool,
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBEndNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBElseNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBIfNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::Node?
      attr_reader subsequent: Herb::AST::Node?

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::Node, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::Node, Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   subsequent: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBBlockNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader body: Array[Herb::AST::Node]

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   body: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBWhenNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBCaseNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : Array[Herb::AST::ERBWhenNode]
      attr_reader conditions: Array[Herb::AST::ERBWhenNode]

      # : Herb::AST::ERBElseNode?
      attr_reader else_clause: Herb::AST::ERBElseNode?

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBWhenNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBWhenNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   conditions: Array[Herb::AST::ERBWhenNode],
      # |   else_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBCaseMatchNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader children: Array[Herb::AST::Node]

      # : Array[Herb::AST::ERBInNode]
      attr_reader conditions: Array[Herb::AST::ERBInNode]

      # : Herb::AST::ERBElseNode?
      attr_reader else_clause: Herb::AST::ERBElseNode?

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBInNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBInNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   children: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   conditions: Array[Herb::AST::ERBInNode],
      # |   else_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBWhileNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBUntilNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBForNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBRescueNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBRescueNode?
      attr_reader subsequent: Herb::AST::ERBRescueNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   subsequent: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBEnsureNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBBeginNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBRescueNode?
      attr_reader rescue_clause: Herb::AST::ERBRescueNode?

      # : Herb::AST::ERBElseNode?
      attr_reader else_clause: Herb::AST::ERBElseNode?

      # : Herb::AST::ERBEnsureNode?
      attr_reader ensure_clause: Herb::AST::ERBEnsureNode?

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode, Herb::AST::ERBElseNode, Herb::AST::ERBEnsureNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode, Herb::AST::ERBElseNode, Herb::AST::ERBEnsureNode, Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   rescue_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   else_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   ensure_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBUnlessNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : Herb::AST::ERBElseNode?
      attr_reader else_clause: Herb::AST::ERBElseNode?

      # : Herb::AST::ERBEndNode?
      attr_reader end_node: Herb::AST::ERBEndNode?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # |   else_clause: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # |   end_node: { type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBYieldNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBInNode < Node
      # : Herb::Token?
      attr_reader tag_opening: Herb::Token?

      # : Herb::Token?
      attr_reader content: Herb::Token?

      # : Herb::Token?
      attr_reader tag_closing: Herb::Token?

      # : Array[Herb::AST::Node]
      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> {
      # |   type: String,
      # |   location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } },
      # |   errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }],
      # |   tag_opening: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   content: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   tag_closing: { value: String, range: [Integer, Integer], location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, type: String },
      # |   statements: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, errors: Array[{ type: String, location: { start: { line: Integer, column: Integer }, end: { line: Integer, column: Integer } }, message: String }] }],
      # | }
      def to_hash: () -> untyped

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end
  end
end
