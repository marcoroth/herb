# Generated from lib/herb/ast/nodes.rb with RBS::Inline

module Herb
  module AST
    # Dynamically reopen Node class to add node_from_hash method with knowledge of all node types
    class Node
      # : (Hash) -> Node
      def self.node_from_hash: (Hash) -> Node
    end

    class DocumentNode < Node
      attr_reader children: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void

      # : () -> serialized_document_node
      def to_hash: () -> serialized_document_node

      # : (Hash) -> DocumentNode
      def self.from_hash: (Hash) -> DocumentNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class LiteralNode < Node
      attr_reader content: String

      # : (String, Location, Array[Herb::Errors::Error], String) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], String) -> void

      # : () -> serialized_literal_node
      def to_hash: () -> serialized_literal_node

      # : (Hash) -> LiteralNode
      def self.from_hash: (Hash) -> LiteralNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLOpenTagNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader tag_name: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader is_void: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], bool) -> void

      # : () -> serialized_html_open_tag_node
      def to_hash: () -> serialized_html_open_tag_node

      # : (Hash) -> HTMLOpenTagNode
      def self.from_hash: (Hash) -> HTMLOpenTagNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLCloseTagNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader tag_name: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> serialized_html_close_tag_node
      def to_hash: () -> serialized_html_close_tag_node

      # : (Hash) -> HTMLCloseTagNode
      def self.from_hash: (Hash) -> HTMLCloseTagNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLElementNode < Node
      attr_reader open_tag: Herb::AST::HTMLOpenTagNode

      attr_reader tag_name: Herb::Token

      attr_reader body: Array[Herb::AST::Node]

      attr_reader close_tag: Herb::AST::HTMLCloseTagNode

      attr_reader is_void: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLOpenTagNode, Herb::Token, Array[Herb::AST::Node], Herb::AST::HTMLCloseTagNode, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLOpenTagNode, Herb::Token, Array[Herb::AST::Node], Herb::AST::HTMLCloseTagNode, bool) -> void

      # : () -> serialized_html_element_node
      def to_hash: () -> serialized_html_element_node

      # : (Hash) -> HTMLElementNode
      def self.from_hash: (Hash) -> HTMLElementNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeValueNode < Node
      attr_reader open_quote: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader close_quote: Herb::Token

      attr_reader quoted: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token, bool) -> void

      # : () -> serialized_html_attribute_value_node
      def to_hash: () -> serialized_html_attribute_value_node

      # : (Hash) -> HTMLAttributeValueNode
      def self.from_hash: (Hash) -> HTMLAttributeValueNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeNameNode < Node
      attr_reader children: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Array[Herb::AST::Node]) -> void

      # : () -> serialized_html_attribute_name_node
      def to_hash: () -> serialized_html_attribute_name_node

      # : (Hash) -> HTMLAttributeNameNode
      def self.from_hash: (Hash) -> HTMLAttributeNameNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLAttributeNode < Node
      attr_reader name: Herb::AST::HTMLAttributeNameNode

      attr_reader equals: Herb::Token

      attr_reader value: Herb::AST::HTMLAttributeValueNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLAttributeNameNode, Herb::Token, Herb::AST::HTMLAttributeValueNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::AST::HTMLAttributeNameNode, Herb::Token, Herb::AST::HTMLAttributeValueNode) -> void

      # : () -> serialized_html_attribute_node
      def to_hash: () -> serialized_html_attribute_node

      # : (Hash) -> HTMLAttributeNode
      def self.from_hash: (Hash) -> HTMLAttributeNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLTextNode < Node
      attr_reader content: String

      # : (String, Location, Array[Herb::Errors::Error], String) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], String) -> void

      # : () -> serialized_html_text_node
      def to_hash: () -> serialized_html_text_node

      # : (Hash) -> HTMLTextNode
      def self.from_hash: (Hash) -> HTMLTextNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLCommentNode < Node
      attr_reader comment_start: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader comment_end: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> serialized_html_comment_node
      def to_hash: () -> serialized_html_comment_node

      # : (Hash) -> HTMLCommentNode
      def self.from_hash: (Hash) -> HTMLCommentNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class HTMLDoctypeNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> serialized_html_doctype_node
      def to_hash: () -> serialized_html_doctype_node

      # : (Hash) -> HTMLDoctypeNode
      def self.from_hash: (Hash) -> HTMLDoctypeNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class XMLDeclarationNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> serialized_xml_declaration_node
      def to_hash: () -> serialized_xml_declaration_node

      # : (Hash) -> XMLDeclarationNode
      def self.from_hash: (Hash) -> XMLDeclarationNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class CDATANode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Array[Herb::AST::Node], Herb::Token) -> void

      # : () -> serialized_cdata_node
      def to_hash: () -> serialized_cdata_node

      # : (Hash) -> CDATANode
      def self.from_hash: (Hash) -> CDATANode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class WhitespaceNode < Node
      attr_reader value: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token) -> void

      # : () -> serialized_whitespace_node
      def to_hash: () -> serialized_whitespace_node

      # : (Hash) -> WhitespaceNode
      def self.from_hash: (Hash) -> WhitespaceNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBContentNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader analyzed_ruby: nil

      attr_reader parsed: bool

      attr_reader valid: bool

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, nil, bool, bool) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, nil, bool, bool) -> void

      # : () -> serialized_erb_content_node
      def to_hash: () -> serialized_erb_content_node

      # : (Hash) -> ERBContentNode
      def self.from_hash: (Hash) -> ERBContentNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBEndNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void

      # : () -> serialized_erb_end_node
      def to_hash: () -> serialized_erb_end_node

      # : (Hash) -> ERBEndNode
      def self.from_hash: (Hash) -> ERBEndNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBElseNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> serialized_erb_else_node
      def to_hash: () -> serialized_erb_else_node

      # : (Hash) -> ERBElseNode
      def self.from_hash: (Hash) -> ERBElseNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBIfNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader subsequent: Herb::AST::Node

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::Node, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::Node, Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_if_node
      def to_hash: () -> serialized_erb_if_node

      # : (Hash) -> ERBIfNode
      def self.from_hash: (Hash) -> ERBIfNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBBlockNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader body: Array[Herb::AST::Node]

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_block_node
      def to_hash: () -> serialized_erb_block_node

      # : (Hash) -> ERBBlockNode
      def self.from_hash: (Hash) -> ERBBlockNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBWhenNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> serialized_erb_when_node
      def to_hash: () -> serialized_erb_when_node

      # : (Hash) -> ERBWhenNode
      def self.from_hash: (Hash) -> ERBWhenNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBCaseNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader conditions: Array[Herb::AST::ERBWhenNode]

      attr_reader else_clause: Herb::AST::ERBElseNode

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBWhenNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBWhenNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_case_node
      def to_hash: () -> serialized_erb_case_node

      # : (Hash) -> ERBCaseNode
      def self.from_hash: (Hash) -> ERBCaseNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBCaseMatchNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader children: Array[Herb::AST::Node]

      attr_reader conditions: Array[Herb::AST::ERBInNode]

      attr_reader else_clause: Herb::AST::ERBElseNode

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBInNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Array[Herb::AST::ERBInNode], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_case_match_node
      def to_hash: () -> serialized_erb_case_match_node

      # : (Hash) -> ERBCaseMatchNode
      def self.from_hash: (Hash) -> ERBCaseMatchNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBWhileNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_while_node
      def to_hash: () -> serialized_erb_while_node

      # : (Hash) -> ERBWhileNode
      def self.from_hash: (Hash) -> ERBWhileNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBUntilNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_until_node
      def to_hash: () -> serialized_erb_until_node

      # : (Hash) -> ERBUntilNode
      def self.from_hash: (Hash) -> ERBUntilNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBForNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_for_node
      def to_hash: () -> serialized_erb_for_node

      # : (Hash) -> ERBForNode
      def self.from_hash: (Hash) -> ERBForNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBRescueNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader subsequent: Herb::AST::ERBRescueNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode) -> void

      # : () -> serialized_erb_rescue_node
      def to_hash: () -> serialized_erb_rescue_node

      # : (Hash) -> ERBRescueNode
      def self.from_hash: (Hash) -> ERBRescueNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBEnsureNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> serialized_erb_ensure_node
      def to_hash: () -> serialized_erb_ensure_node

      # : (Hash) -> ERBEnsureNode
      def self.from_hash: (Hash) -> ERBEnsureNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBBeginNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader rescue_clause: Herb::AST::ERBRescueNode

      attr_reader else_clause: Herb::AST::ERBElseNode

      attr_reader ensure_clause: Herb::AST::ERBEnsureNode

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode, Herb::AST::ERBElseNode, Herb::AST::ERBEnsureNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBRescueNode, Herb::AST::ERBElseNode, Herb::AST::ERBEnsureNode, Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_begin_node
      def to_hash: () -> serialized_erb_begin_node

      # : (Hash) -> ERBBeginNode
      def self.from_hash: (Hash) -> ERBBeginNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBUnlessNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      attr_reader else_clause: Herb::AST::ERBElseNode

      attr_reader end_node: Herb::AST::ERBEndNode

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node], Herb::AST::ERBElseNode, Herb::AST::ERBEndNode) -> void

      # : () -> serialized_erb_unless_node
      def to_hash: () -> serialized_erb_unless_node

      # : (Hash) -> ERBUnlessNode
      def self.from_hash: (Hash) -> ERBUnlessNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBYieldNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token) -> void

      # : () -> serialized_erb_yield_node
      def to_hash: () -> serialized_erb_yield_node

      # : (Hash) -> ERBYieldNode
      def self.from_hash: (Hash) -> ERBYieldNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end

    class ERBInNode < Node
      attr_reader tag_opening: Herb::Token

      attr_reader content: Herb::Token

      attr_reader tag_closing: Herb::Token

      attr_reader statements: Array[Herb::AST::Node]

      # : (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void
      def initialize: (String, Location, Array[Herb::Errors::Error], Herb::Token, Herb::Token, Herb::Token, Array[Herb::AST::Node]) -> void

      # : () -> serialized_erb_in_node
      def to_hash: () -> serialized_erb_in_node

      # : (Hash) -> ERBInNode
      def self.from_hash: (Hash) -> ERBInNode

      # : (Visitor) -> void
      def accept: (Visitor) -> void

      # : () -> Array[Herb::AST::Node?]
      def child_nodes: () -> Array[Herb::AST::Node?]

      # : () -> Array[Herb::AST::Node]
      def compact_child_nodes: () -> Array[Herb::AST::Node]

      # : () -> String
      def inspect: () -> String

      # : (?Integer) -> String
      def tree_inspect: (?Integer) -> String
    end
  end
end
