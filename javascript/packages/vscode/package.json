{
  "name": "herb-lsp",
  "displayName": "Herb LSP - HTML+ERB Language Tools",
  "description": "VS Code extension for connecting with the Herb Language Server and Language Tools for HTML+ERB files",
  "version": "0.5.0",
  "private": true,
  "license": "MIT",
  "pricing": "Free",
  "icon": "icon.png",
  "publisher": "marcoroth",
  "author": {
    "name": "Marco Roth"
  },
  "engines": {
    "vscode": "^1.43.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters"
  ],
  "keywords": [
    "HTML",
    "Ruby",
    "ERB"
  ],
  "homepage": "https://herb-tools.dev",
  "bugs": "https://github.com/marcoroth/herb/issues/new?title=Package%20%60@herb-lsp-vscode%60:%20",
  "repository": {
    "type": "git",
    "url": "https://github.com/marcoroth/herb.git",
    "directory": "javascript/packages/vscode"
  },
  "sponsor": {
    "url": "http://github.com/sponsors/marcoroth"
  },
  "activationEvents": [
    "onLanguage:erb",
    "onLanguage:html",
    "onCommand:herb.analyzeProject",
    "onCommand:herb.reprocessFile"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Herb LSP (HTML+ERB)",
      "properties": {
        "languageServerHerb.linter.enabled": {
          "title": "Herb Linter",
          "scope": "window",
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Herb Linter. The linter provides comprehensive HTML+ERB validation, enforces best practices, and catches common errors with a set of configurable rules, like proper tag nesting, required attributes, and ERB usage patterns.",
          "markdownDescription": "Enable/disable the [Herb Linter](https://herb-tools.dev/projects/linter). The linter provides comprehensive HTML+ERB validation, enforces best practices, and catches common errors with a set of configurable [rules](https://herb-tools.dev/linter/rules/), like proper tag nesting, required attributes, and ERB usage patterns."
        },
        "languageServerHerb.linter.excludedRules": {
          "title": "Herb Linter Excluded Rules",
          "scope": "window",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "erb-no-empty-tags",
              "erb-no-output-control-flow",
              "erb-prefer-image-tag-helper",
              "erb-require-whitespace-inside-tags",
              "erb-requires-trailing-newline",
              "html-anchor-require-href",
              "html-aria-attribute-must-be-valid",
              "html-aria-level-must-be-valid",
              "html-aria-role-heading-requires-level",
              "html-aria-role-must-be-valid",
              "html-attribute-double-quotes",
              "html-attribute-values-require-quotes",
              "html-boolean-attributes-no-value",
              "html-img-require-alt",
              "html-no-block-inside-inline",
              "html-no-duplicate-attributes",
              "html-no-duplicate-ids",
              "html-no-empty-headings",
              "html-no-nested-links",
              "html-tag-name-lowercase",
              "parser-no-errors",
              "svg-tag-name-capitalization"
            ]
          },
          "uniqueItems": true,
          "default": [
            "parser-no-errors"
          ],
          "description": "Array of linter rule names to exclude from diagnostics. The 'parser-no-errors' rule is excluded by default to prevent duplicate error reporting since parser errors are already displayed through the language server's built-in diagnostics.",
          "markdownDescription": "Array of linter rule names to exclude from diagnostics. The `parser-no-errors` rule is excluded by default to prevent duplicate error reporting since parser errors are already displayed through the language server's built-in diagnostics. See all available [rules](https://herb-tools.dev/linter/rules/)."
        },
        "languageServerHerb.formatter.enabled": {
          "scope": "resource",
          "type": "boolean",
          "default": false,
          "description": "Enable/disable document formatting using the Herb Formatter (Experimental Preview). WARNING: This formatter is experimental and may potentially corrupt files. Only use on files that can be restored via git or other version control.",
          "markdownDescription": "Enable/disable document formatting using the [Herb Formatter](https://herb-tools.dev/projects/formatter) **(Experimental Preview)**. ⚠️ **WARNING**: This formatter is experimental and may potentially corrupt files. Only use on files that can be restored via git or other version control."
        },
        "languageServerHerb.formatter.indentWidth": {
          "scope": "resource",
          "type": "number",
          "default": 2,
          "description": "Number of spaces for each indentation level."
        },
        "languageServerHerb.formatter.maxLineLength": {
          "scope": "resource",
          "type": "number",
          "default": 80,
          "description": "Maximum line length before wrapping."
        },
        "languageServerHerb.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "verbose",
          "description": "Traces the communication between Visual Studio Code and the Herb Language Server."
        }
      }
    },
    "commands": [
      {
        "command": "herb.analyzeProject",
        "title": "Herb: Analyze Project",
        "icon": "$(refresh)"
      },
      {
        "command": "herb.reprocessFile",
        "title": "Herb: Re-analyze File",
        "icon": "$(refresh)"
      },
      {
        "command": "herb.reportIssue",
        "title": "Herb: Report Issue",
        "icon": "$(github)"
      },
      {
        "command": "herb.reportDetailedIssue",
        "title": "Herb: Report Detailed Issue",
        "icon": "$(github)"
      },
      {
        "command": "herb.reportGeneralIssue",
        "title": "Herb: Report General Issue",
        "icon": "$(github)"
      },
      {
        "command": "herb.reportDiagnosticIssue",
        "title": "Herb: Report Issue with Diagnostic",
        "icon": "$(github)",
        "when": "false"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "herbExplorer",
          "title": "Herb",
          "icon": "assets/herb.svg"
        }
      ]
    },
    "views": {
      "herbExplorer": [
        {
          "id": "herbFileStatus",
          "name": "Project Analysis"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "herb.analyzeProject",
          "when": "view == herbFileStatus",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "herb.reprocessFile",
          "when": "view == herbFileStatus && (viewItem == herbFileWithIssues || viewItem == herbFileOk)",
          "group": "inline"
        },
        {
          "command": "herb.reportDetailedIssue",
          "when": "view == herbFileStatus && viewItem == herbFileWithIssues",
          "group": "inline"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "herbFileStatus",
        "contents": "Run a project analysis to get started",
        "button": {
          "title": "Analyze Project",
          "command": "herb.analyzeProject"
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "publish": "vsce publish",
    "build": "yarn clean && yarn sync-defaults && yarn run check-types && yarn run lint && yarn build:language-server && node esbuild.js",
    "build:language-server": "cd ../language-server && yarn build && cd -",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "yarn run check-types && yarn run lint && node esbuild.js --production",
    "build-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run build-tests && yarn run build && yarn run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "if [ -z \"$DISPLAY\" ]; then xvfb-run -a yarn vscode:test; else yarn vscode:test; fi",
    "vscode:test": "vscode-test",
    "clean": "rimraf dist",
    "sync-defaults": "node scripts/sync-defaults.js",
    "prepublishOnly": "yarn clean && yarn build && yarn test"
  },
  "devDependencies": {
    "@herb-tools/formatter": "0.5.0",
    "@herb-tools/linter": "0.5.0",
    "@herb-tools/node-wasm": "0.5.0",
    "@types/node": "20.x",
    "@types/vscode": "^1.43.0",
    "@typescript-eslint/eslint-plugin": "^8.40.0",
    "@typescript-eslint/parser": "^8.40.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.5.0",
    "esbuild": "^0.25.9",
    "esbuild-plugin-copy": "^2.1.1",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "vscode-languageclient": "^9.0.1"
  }
}
