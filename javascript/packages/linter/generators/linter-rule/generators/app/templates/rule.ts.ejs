/*
 * Rule Type Guide:
 * - ParserRule: AST-based validation using parsed document tree (most common)
 * - LexerRule: Token-based validation using lexer output (for syntax-level checks)  
 * - SourceRule: Raw text validation using original source code (for file-level checks)
 * 
 * This template generates a ParserRule. To create other types:
 * - Replace `ParserRule` with `LexerRule` and use `BaseLexerRuleVisitor`
 * - Replace `ParserRule` with `SourceRule` and use `BaseSourceRuleVisitor`
 */

import { BaseRuleVisitor } from "./rule-utils.js"
import { ParserRule } from "../types.js"
import type { LintOffense, LintContext } from "../types.js"
import type { Node, HTMLElementNode, ERBContentNode } from "@herb-tools/core"

class <%= visitorClassName %> extends BaseRuleVisitor {
  visitHTMLElementNode(node: HTMLElementNode): void {
    // TODO: implement logic
    this.visitChildNodes(node)
  }

  visitERBContentNode(node: ERBContentNode): void {
    // TODO: implement logic
    this.visitChildNodes(node)
  }

  // TODO: implement other nodes if needed
}

export class <%= ruleClassName %> extends ParserRule {
  name = "<%= ruleName %>"

  check(node: Node, context?: Partial<LintContext>): LintOffense[] {
    const visitor = new <%= visitorClassName %>(this.name, context)

    visitor.visit(node)

    return visitor.offenses
  }
}
